#!/bin/bash

# Thmanyah Backend Terraform Setup Script
# This script generates secure passwords and helps set up your terraform.tfvars

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to generate secure password
generate_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
}

# Function to get AWS account ID
get_aws_account_id() {
    aws sts get-caller-identity --query Account --output text
}

# Function to get AWS region
get_aws_region() {
    aws configure get region || echo "us-east-1"
}

# Main script
main() {
    print_status "Starting Thmanyah Backend Terraform Setup..."
    
    # Check if we're in the right directory
    if [ ! -f "package.json" ]; then
        print_error "Please run this script from the thmanyah-backend root directory"
        exit 1
    fi
    
    # Check if AWS CLI is configured
    if ! aws sts get-caller-identity > /dev/null 2>&1; then
        print_error "AWS CLI is not configured. Please run 'aws configure' first."
        exit 1
    fi
    
    # Get AWS account ID and region
    print_status "Getting AWS account information..."
    AWS_ACCOUNT_ID=$(get_aws_account_id)
    AWS_REGION=$(get_aws_region)
    
    print_success "AWS Account ID: $AWS_ACCOUNT_ID"
    print_success "AWS Region: $AWS_REGION"
    
    # Generate secure passwords
    print_status "Generating secure passwords..."
    DB_PASSWORD=$(generate_password)
    REDIS_PASSWORD=$(generate_password)
    ELASTICSEARCH_PASSWORD=$(generate_password)
    JWT_SECRET=$(generate_password)
    
    print_success "Passwords generated successfully"
    
    # Create terraform.tfvars for dev environment
    print_status "Creating terraform.tfvars for dev environment..."
    
    cat > terraform/environments/dev/terraform.tfvars << EOF
# Generated by setup script on $(date)
app_name = "thmanyah-backend"
environment = "dev"
region = "$AWS_REGION"
vpc_cidr = "10.0.0.0/16"
availability_zones = ["${AWS_REGION}a", "${AWS_REGION}b"]

# Database configuration
db_name = "thmanyah_dev"
db_user = "thmanyah_user"
db_port = 5432
db_instance_class = "db.t4g.micro"
db_allocated_storage = 20
db_password = "$DB_PASSWORD"

# Redis configuration
redis_node_type = "cache.t4.micro"
redis_port = 6379
redis_password = "$REDIS_PASSWORD"

# Elasticsearch configuration
elasticsearch_instance_type = "t3.small.elasticsearch"
elasticsearch_instance_count = 1
elasticsearch_volume_size = 10
elasticsearch_username = "admin"
elasticsearch_index_name = "programs"
elasticsearch_password = "$ELASTICSEARCH_PASSWORD"

# Service ports
cms_api_port = 3001
discovery_api_port = 3002

# Task resources
task_cpu = 256
task_memory = 512

# JWT configuration
jwt_secret = "$JWT_SECRET"

# Docker image URIs (update these after building and pushing to ECR)
cms_api_image = "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/thmanyah-backend-dev-cms-api:latest"
discovery_api_image = "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/thmanyah-backend-dev-discovery-api:latest"
outbox_publisher_image = "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/thmanyah-backend-dev-outbox-publisher:latest"
sync_worker_image = "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/thmanyah-backend-dev-sync-worker:latest"
EOF
    
    print_success "terraform.tfvars created for dev environment"
    
    # Create terraform.tfvars for prod environment
    print_status "Creating terraform.tfvars for prod environment..."
    
    cat > terraform/environments/prod/terraform.tfvars << EOF
# Generated by setup script on $(date)
app_name = "thmanyah-backend"
environment = "prod"
region = "$AWS_REGION"
vpc_cidr = "10.0.0.0/16"
availability_zones = ["${AWS_REGION}a", "${AWS_REGION}b", "${AWS_REGION}c"]

# Database configuration
db_name = "thmanyah_prod"
db_user = "thmanyah_user"
db_port = 5432
db_instance_class = "db.t3.small"
db_allocated_storage = 100
db_password = "$DB_PASSWORD"

# Redis configuration
redis_node_type = "cache.t3.small"
redis_port = 6379
redis_password = "$REDIS_PASSWORD"

# Elasticsearch configuration
elasticsearch_instance_type = "t3.medium.search"
elasticsearch_instance_count = 2
elasticsearch_volume_size = 50
elasticsearch_username = "admin"
elasticsearch_index_name = "programs"
elasticsearch_password = "$ELASTICSEARCH_PASSWORD"

# Service ports
cms_api_port = 3001
discovery_api_port = 3002

# Task resources
task_cpu = 512
task_memory = 1024

# JWT configuration
jwt_secret = "$JWT_SECRET"

# Docker image URIs (update these after building and pushing to ECR)
cms_api_image = "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/thmanyah-backend-prod-cms-api:latest"
discovery_api_image = "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/thmanyah-backend-prod-discovery-api:latest"
outbox_publisher_image = "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/thmanyah-backend-prod-outbox-publisher:latest"
sync_worker_image = "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/thmanyah-backend-prod-sync-worker:latest"
EOF
    
    print_success "terraform.tfvars created for prod environment"
    
    # Create a password backup file (for reference only)
    cat > .passwords.txt << EOF
# Thmanyah Backend Passwords (Generated on $(date))
# Keep this file secure and delete after deployment

Database Password: $DB_PASSWORD
Redis Password: $REDIS_PASSWORD
Elasticsearch Password: $ELASTICSEARCH_PASSWORD
JWT Secret: $JWT_SECRET

AWS Account ID: $AWS_ACCOUNT_ID
AWS Region: $AWS_REGION
EOF
    
    print_warning "Passwords saved to .passwords.txt - DELETE THIS FILE AFTER DEPLOYMENT!"
    
    # Print next steps
    echo
    print_success "Setup completed successfully!"
    echo
    print_status "Next steps:"
    echo "1. Review the generated terraform.tfvars files"
    echo "2. Run: cd terraform/environments/dev && terraform init"
    echo "3. Run: terraform plan"
    echo "4. Run: terraform apply"
    echo "5. Build and push Docker images to ECR"
    echo "6. Update terraform.tfvars with actual ECR image URIs"
    echo "7. Run terraform apply again to deploy services"
    echo
    print_warning "Remember to delete .passwords.txt after deployment!"
}

# Run the main function
main "$@" 